---
# PostgreSQL for Immich
apiVersion: v1
kind: Secret
metadata:
  name: immich-db-secret
  namespace: cloud-services
type: Opaque
stringData:
  POSTGRES_PASSWORD: "immichpassword123"
  POSTGRES_USER: "immich"
  POSTGRES_DB: "immich"
  DB_PASSWORD: "immichpassword123"
  DB_USERNAME: "immich"
  DB_DATABASE_NAME: "immich"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-db-pvc
  namespace: cloud-services
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-path
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-postgres
  namespace: cloud-services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: immich-postgres
  template:
    metadata:
      labels:
        app: immich-postgres
    spec:
      nodeSelector:
        node-role.home.lab/storage: "true"
      containers:
      - name: postgres
        image: tensorchord/pgvecto-rs:pg14-v0.2.0
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: immich-db-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: immich-db-secret
              key: POSTGRES_USER
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: immich-db-secret
              key: POSTGRES_DB
        - name: PG_DATA
          value: "/var/lib/postgresql/data"
        volumeMounts:
        - name: db-data
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: db-data
        persistentVolumeClaim:
          claimName: immich-db-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: immich-postgres
  namespace: cloud-services
spec:
  selector:
    app: immich-postgres
  ports:
  - port: 5432
    targetPort: 5432
---
# Redis for Immich
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-redis
  namespace: cloud-services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: immich-redis
  template:
    metadata:
      labels:
        app: immich-redis
    spec:
      nodeSelector:
        node-role.home.lab/compute: "true"
      containers:
      - name: redis
        image: redis:6.2-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: immich-redis
  namespace: cloud-services
spec:
  selector:
    app: immich-redis
  ports:
  - port: 6379
    targetPort: 6379
---
# Machine Learning Cache PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-ml-cache-pvc
  namespace: cloud-services
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-path
  resources:
    requests:
      storage: 5Gi
---
# Immich Machine Learning Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-machine-learning
  namespace: cloud-services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: immich-machine-learning
  template:
    metadata:
      labels:
        app: immich-machine-learning
    spec:
      nodeSelector:
        node-role.home.lab/compute: "true"
      containers:
      - name: immich-machine-learning
        image: ghcr.io/immich-app/immich-machine-learning:release
        ports:
        - containerPort: 3003
        env:
        - name: TRANSFORMERS_CACHE
          value: "/cache"
        volumeMounts:
        - name: ml-cache
          mountPath: /cache
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "2Gi"
            cpu: "1"
      volumes:
      - name: ml-cache
        persistentVolumeClaim:
          claimName: immich-ml-cache-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: immich-machine-learning
  namespace: cloud-services
spec:
  selector:
    app: immich-machine-learning
  ports:
  - port: 3003
    targetPort: 3003
    name: http
---
# Immich Server
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: immich-upload-pvc
  namespace: cloud-services
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-path
  resources:
    requests:
      storage: 100Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-server
  namespace: cloud-services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: immich-server
  template:
    metadata:
      labels:
        app: immich-server
    spec:
      nodeSelector:
        node-role.home.lab/storage: "true"
      containers:
      - name: immich-server
        image: ghcr.io/immich-app/immich-server:release
        ports:
        - containerPort: 2283
        env:
        - name: DB_HOSTNAME
          value: "immich-postgres"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: immich-db-secret
              key: DB_PASSWORD
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: immich-db-secret
              key: DB_USERNAME
        - name: DB_DATABASE_NAME
          valueFrom:
            secretKeyRef:
              name: immich-db-secret
              key: DB_DATABASE_NAME
        - name: REDIS_HOSTNAME
          value: "immich-redis"
        - name: MACHINE_LEARNING_URL
          value: "http://immich-machine-learning:3003"
        - name: JWT_SECRET
          value: "my-immich-jwt-secret-change-this"
        - name: DISABLE_REVERSE_GEOCODING
          value: "false"
        volumeMounts:
        - name: upload-data
          mountPath: /usr/src/app/upload
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "2Gi"
            cpu: "1"
      volumes:
      - name: upload-data
        persistentVolumeClaim:
          claimName: immich-upload-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: immich-server
  namespace: cloud-services
spec:
  type: LoadBalancer
  selector:
    app: immich-server
  ports:
  - port: 2283
    targetPort: 2283
    name: http
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: immich
  namespace: cloud-services
  annotations:
    cert-manager.io/cluster-issuer: "ca-issuer"
    # Large uploads for photos/videos
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    traefik.ingress.kubernetes.io/router.middlewares: cloud-services-immich-headers@kubernetescrd
spec:
  ingressClassName: traefik
  tls:
  - hosts:
    - immich.home.lab
    secretName: immich-tls
  rules:
  - host: immich.home.lab
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: immich-server
            port:
              number: 2283
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: immich-headers
  namespace: cloud-services
spec:
  headers:
    customRequestHeaders:
      X-Forwarded-Proto: "https"