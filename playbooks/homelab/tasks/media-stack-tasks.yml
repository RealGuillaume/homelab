---
- name: Deploy Media Namespace and Plex
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', '../../k8s/homelab/media/plex.yaml') | from_yaml_all | list }}"
    kubeconfig: /etc/rancher/k3s/k3s.yaml

- name: Deploy Radarr
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', '../../k8s/homelab/media/radarr.yaml') | from_yaml_all | list }}"
    kubeconfig: /etc/rancher/k3s/k3s.yaml

- name: Deploy Sonarr
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', '../../k8s/homelab/media/sonarr.yaml') | from_yaml_all | list }}"
    kubeconfig: /etc/rancher/k3s/k3s.yaml

- name: Deploy qBittorrent with VPN
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', '../../k8s/homelab/media/qbittorrent-vpn.yaml') | from_yaml_all | list }}"
    kubeconfig: /etc/rancher/k3s/k3s.yaml

- name: Deploy Overseerr
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', '../../k8s/homelab/media/overseerr.yaml') | from_yaml_all | list }}"
    kubeconfig: /etc/rancher/k3s/k3s.yaml

- name: Deploy Prowlarr
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('file', '../../k8s/homelab/media/prowlarr.yaml') | from_yaml_all | list }}"
    kubeconfig: /etc/rancher/k3s/k3s.yaml

- name: Wait for media deployments to be ready
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: "{{ item }}"
    namespace: media
    kubeconfig: /etc/rancher/k3s/k3s.yaml
    wait: true
    wait_condition:
      type: Available
      status: "True"
    wait_timeout: 600
  loop:
    - plex
    - radarr
    - sonarr
    - qbittorrent-vpn
    - overseerr
    - prowlarr

- name: Wait for services to initialize
  pause:
    seconds: 30

- name: Configure Radarr root folder via API
  uri:
    url: "http://172.23.30.250:7878/api/v3/rootfolder"
    method: POST
    headers:
      X-Api-Key: "fa15aa8c601345308478b355e0fe9079"
      Content-Type: "application/json"
    body_format: json
    body:
      path: "/media/movies"
    status_code: [200, 201, 400]
  ignore_errors: true

- name: Configure Sonarr root folder via API  
  uri:
    url: "http://172.23.25.22:32502/api/v3/rootfolder"
    method: POST
    headers:
      X-Api-Key: "fc32a82594b0416d8e2cf8cb14729265"
      Content-Type: "application/json"
    body_format: json
    body:
      path: "/media/tv"
    status_code: [200, 201, 400]
  ignore_errors: true

- name: Get Prowlarr LoadBalancer IP
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Service
    name: prowlarr
    namespace: media
    kubeconfig: /etc/rancher/k3s/k3s.yaml
  register: prowlarr_service

- name: Set Prowlarr IP
  set_fact:
    prowlarr_ip: "{{ prowlarr_service.resources[0].status.loadBalancer.ingress[0].ip }}"

- name: Wait for Prowlarr API to be ready
  uri:
    url: "http://{{ prowlarr_ip }}:9696/api/v1/system/status"
    method: GET
  register: prowlarr_status
  until: prowlarr_status.status == 200
  retries: 30
  delay: 10
  ignore_errors: true

- name: Extract Prowlarr API key
  shell: |
    kubectl exec -n media deployment/prowlarr -- cat /config/config.xml | grep -o '<ApiKey>[^<]*</ApiKey>' | sed 's/<ApiKey>//g' | sed 's/<\/ApiKey>//g'
  register: prowlarr_api_key
  retries: 5
  delay: 10
  until: prowlarr_api_key.stdout != ""

- name: Configure qBittorrent download client in Radarr
  uri:
    url: "http://172.23.30.250:7878/api/v3/downloadclient"
    method: POST
    headers:
      X-Api-Key: "fa15aa8c601345308478b355e0fe9079"
      Content-Type: "application/json"
    body_format: json
    body:
      enable: true
      protocol: "torrent"
      priority: 1
      removeCompletedDownloads: true
      removeFailedDownloads: true
      name: "qBittorrent"
      fields:
        - name: "host"
          value: "qbittorrent.media.svc.cluster.local"
        - name: "port"
          value: 8080
        - name: "useSsl"
          value: false
        - name: "urlBase"
          value: ""
        - name: "username"
          value: "admin"
        - name: "password"
          value: ""
        - name: "category"
          value: "radarr"
        - name: "recentTvPriority"
          value: 0
        - name: "olderTvPriority"
          value: 0
        - name: "initialState"
          value: 0
        - name: "sequentialOrder"
          value: false
        - name: "firstAndLast"
          value: false
      implementation: "QBittorrent"
      implementationName: "qBittorrent"
      infoLink: "https://wiki.servarr.com/radarr/supported#qbittorrent"
      tags: []
    status_code: [200, 201, 400]
  ignore_errors: true

- name: Configure qBittorrent download client in Sonarr
  uri:
    url: "http://172.23.25.22:32502/api/v3/downloadclient"
    method: POST
    headers:
      X-Api-Key: "fc32a82594b0416d8e2cf8cb14729265"
      Content-Type: "application/json"
    body_format: json
    body:
      enable: true
      protocol: "torrent"
      priority: 1
      removeCompletedDownloads: true
      removeFailedDownloads: true
      name: "qBittorrent"
      fields:
        - name: "host"
          value: "qbittorrent.media.svc.cluster.local"
        - name: "port"
          value: 8080
        - name: "useSsl"
          value: false
        - name: "urlBase"
          value: ""
        - name: "username"
          value: "admin"
        - name: "password"
          value: ""
        - name: "category"
          value: "sonarr"
        - name: "recentTvPriority"
          value: 0
        - name: "olderTvPriority"
          value: 0
        - name: "initialState"
          value: 0
        - name: "sequentialOrder"
          value: false
        - name: "firstAndLast"
          value: false
      implementation: "QBittorrent"
      implementationName: "qBittorrent"
      infoLink: "https://wiki.servarr.com/sonarr/supported#qbittorrent"
      tags: []
    status_code: [200, 201, 400]
  ignore_errors: true

- name: Add Radarr application in Prowlarr
  uri:
    url: "http://{{ prowlarr_ip }}:9696/api/v1/applications"
    method: POST
    headers:
      X-Api-Key: "{{ prowlarr_api_key.stdout }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "Radarr"
      syncLevel: "fullSync"
      implementation: "Radarr"
      implementationName: "Radarr"
      fields:
        - name: "prowlarrUrl"
          value: "http://prowlarr.media.svc.cluster.local:9696"
        - name: "baseUrl"
          value: "http://radarr.media.svc.cluster.local:7878"
        - name: "apiKey"
          value: "fa15aa8c601345308478b355e0fe9079"
        - name: "syncCategories"
          value: [2000, 2010, 2020, 2030, 2040, 2045, 2050, 2060, 2070, 2080]
        - name: "animeSyncCategories"
          value: [5070]
      tags: []
    status_code: [200, 201, 400]
  ignore_errors: true

- name: Add Sonarr application in Prowlarr  
  uri:
    url: "http://{{ prowlarr_ip }}:9696/api/v1/applications"
    method: POST
    headers:
      X-Api-Key: "{{ prowlarr_api_key.stdout }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "Sonarr"
      syncLevel: "fullSync"
      implementation: "Sonarr"
      implementationName: "Sonarr"
      fields:
        - name: "prowlarrUrl"
          value: "http://prowlarr.media.svc.cluster.local:9696"
        - name: "baseUrl"
          value: "http://sonarr.media.svc.cluster.local:8989"
        - name: "apiKey"
          value: "fc32a82594b0416d8e2cf8cb14729265"
        - name: "syncCategories"
          value: [5000, 5010, 5020, 5030, 5040, 5045, 5050, 5060, 5070, 5080]
        - name: "animeSyncCategories"
          value: [5070]
      tags: []
    status_code: [200, 201, 400]
  ignore_errors: true

- name: Add popular public indexers to Prowlarr
  uri:
    url: "http://{{ prowlarr_ip }}:9696/api/v1/indexer"
    method: POST
    headers:
      X-Api-Key: "{{ prowlarr_api_key.stdout }}"
      Content-Type: "application/json"
    body_format: json
    body: "{{ item }}"
    status_code: [200, 201, 400]
  ignore_errors: true
  loop:
    # 1337x - Popular general torrent site with verified content
    - name: "1337x"
      enable: true
      implementation: "Cardigann"
      configContract: "CardigannSettings"
      priority: 25
      tags: []
      fields:
        - name: "definitionFile"
          value: "1337x"
        - name: "categories"
          value: [2000, 2010, 2020, 2030, 2040, 2045, 2050, 2060, 2070, 2080, 5000, 5010, 5020, 5030, 5040, 5045, 5050, 5060, 5070, 5080]
    
    # The Pirate Bay - Most comprehensive torrent site
    - name: "The Pirate Bay"
      enable: true
      implementation: "Cardigann"
      configContract: "CardigannSettings"
      priority: 20
      tags: []
      fields:
        - name: "definitionFile"
          value: "thepiratebay"
        - name: "categories"
          value: [2000, 2010, 2020, 2030, 2040, 2045, 2050, 2060, 2070, 2080, 5000, 5010, 5020, 5030, 5040, 5045, 5050, 5060, 5070, 5080]
    
    # YTS - High quality movies with small file sizes
    - name: "YTS"
      enable: true
      implementation: "Cardigann"
      configContract: "CardigannSettings"
      priority: 30
      tags: []
      fields:
        - name: "definitionFile"
          value: "yts"
        - name: "categories"
          value: [2000, 2010, 2020, 2030, 2040, 2045, 2050, 2060, 2070, 2080]
    
    # TorrentGalaxy - Good for 4K content and active community
    - name: "TorrentGalaxy"
      enable: true
      implementation: "Cardigann"
      configContract: "CardigannSettings"
      priority: 25
      tags: []
      fields:
        - name: "definitionFile"
          value: "torrentgalaxy"
        - name: "categories"
          value: [2000, 2010, 2020, 2030, 2040, 2045, 2050, 2060, 2070, 2080, 5000, 5010, 5020, 5030, 5040, 5045, 5050, 5060, 5070, 5080]
    
    # NYAA - Best for anime content
    - name: "NYAA"
      enable: true
      implementation: "Cardigann"
      configContract: "CardigannSettings"
      priority: 30
      tags: []
      fields:
        - name: "definitionFile"
          value: "nyaa"
        - name: "categories"
          value: [5070]

- name: Wait for indexer sync to complete
  pause:
    seconds: 15

- name: Trigger Prowlarr sync to applications
  uri:
    url: "http://{{ prowlarr_ip }}:9696/api/v1/applications/sync"
    method: POST
    headers:
      X-Api-Key: "{{ prowlarr_api_key.stdout }}"
      Content-Type: "application/json"
    status_code: [200, 201, 202]
  ignore_errors: true

- name: Get media services LoadBalancer IPs
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Service
    namespace: media
    kubeconfig: /etc/rancher/k3s/k3s.yaml
  register: media_services

- name: Display media stack access information
  debug:
    msg: |
      🎬 MEDIA STACK DEPLOYED SUCCESSFULLY!
      ====================================
      
      📝 Services Available:
      {% for svc in media_services.resources %}
      {% if svc.spec.type == "LoadBalancer" and svc.status.loadBalancer.ingress is defined %}
      🔗 {{ svc.metadata.name | title }}: http://{{ svc.status.loadBalancer.ingress[0].ip }}{% if svc.spec.ports[0].port != 80 %}:{{ svc.spec.ports[0].port }}{% endif %}
        🌐 Web: https://{{ svc.metadata.name }}.home.lab
      {% endif %}
      {% endfor %}
      
      📋 SETUP INSTRUCTIONS:
      ======================
      
      1. 📺 PLEX (Media Server):
         • Access: https://plex.home.lab
         • Add your Plex claim token in the deployment
         • Configure media libraries pointing to /media
      
      2. 🎬 RADARR (Movies):
         • Access: https://radarr.home.lab  
         • Add download client: qBittorrent (qbittorrent:8080)
         • Add indexers via Prowlarr integration
         • Set movie folder: /media/movies
      
      3. 📺 SONARR (TV Shows):
         • Access: https://sonarr.home.lab
         • Add download client: qBittorrent (qbittorrent:8080)
         • Add indexers via Prowlarr integration
         • Set TV folder: /media/tv
      
      4. 🌐 QBITTORRENT + VPN:
         • Access: https://qbittorrent.home.lab
         • ⚠️  IMPORTANT: Configure Mullvad credentials in secret!
         • Default login: admin / (check container logs for password)
         • Set download path: /downloads
      
      5. 🎭 OVERSEERR (Request Management):
         • Access: https://overseerr.home.lab
         • Connect to Plex server for authentication
         • Connect Radarr and Sonarr for automated requests
      
      6. 🔍 PROWLARR (Indexer Manager):
         • Access: https://prowlarr.home.lab
         • ✅ Connected to Radarr and Sonarr automatically
         • ✅ Full sync enabled for indexer management
         • Add your indexers (private trackers, public sites)
      
      ✅ FULL AUTOMATION COMPLETED:
      ================================
      • ✅ qBittorrent configured as download client in Radarr/Sonarr
      • ✅ Prowlarr connected to both Radarr and Sonarr with full sync
      • ✅ Root folders created with proper permissions
      • ✅ Categories configured (radarr, sonarr)
      • ✅ Popular public indexers automatically added:
        └── 1337x, The Pirate Bay, YTS, TorrentGalaxy, NYAA
      • ✅ All indexers automatically synced to Radarr/Sonarr
      • ✅ All services interconnected via cluster DNS
      • ✅ Media stack is FULLY READY TO USE!
      
      ⚠️  MINIMAL MANUAL CONFIGURATION REMAINING:
      • Configure Plex claim token for remote access (optional)
      • Set up /etc/hosts entries or DNS for *.home.lab domains (optional)
      • Add private indexers if desired (optional)
      
      🔧 Quick Setup Commands:
        kubectl get pods -n media
        kubectl get pvc -n media
        kubectl logs -n media deployment/qbittorrent-vpn -c gluetun