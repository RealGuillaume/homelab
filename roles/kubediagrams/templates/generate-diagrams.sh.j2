#!/bin/bash
# KubeDiagrams Helper Script
# Generated by Ansible - {{ ansible_date_time.date }}

set -e

# Ensure kube-diagrams is in PATH
export PATH="$PATH:/root/.local/bin"

DIAGRAMS_DIR="{{ kubediagrams_output_dir }}"
DEFAULT_FORMAT="{{ kubediagrams_default_format }}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üé® Kubernetes Diagram Generator${NC}"
echo -e "${BLUE}=================================${NC}"

# Ensure diagrams directory exists
mkdir -p "$DIAGRAMS_DIR"

# Function to generate diagram from namespace
generate_namespace_diagram() {
    local namespace=$1
    local output_file="$DIAGRAMS_DIR/${namespace}-overview.${DEFAULT_FORMAT}"
    
    echo -e "${YELLOW}üìä Generating diagram for namespace: ${namespace}${NC}"
    
    if kubectl get namespace "$namespace" &>/dev/null; then
        kubectl get all -n "$namespace" -o yaml | kube-diagrams -o "$output_file" -
        if [[ $? -eq 0 ]]; then
            echo -e "${GREEN}‚úÖ Generated: $output_file${NC}"
        else
            echo -e "${RED}‚ùå Failed to generate diagram for namespace: $namespace${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Namespace '$namespace' not found, skipping...${NC}"
    fi
}

# Function to generate cluster overview
generate_cluster_overview() {
    local output_file="$DIAGRAMS_DIR/cluster-overview.${DEFAULT_FORMAT}"
    
    echo -e "${YELLOW}üìä Generating cluster overview diagram${NC}"
    kubectl get all -A -o yaml | kube-diagrams -o "$output_file" -
    
    if [[ $? -eq 0 ]]; then
        echo -e "${GREEN}‚úÖ Generated: $output_file${NC}"
    else
        echo -e "${RED}‚ùå Failed to generate cluster overview${NC}"
    fi
}

# Function to generate diagram from manifest files
generate_manifest_diagram() {
    local manifest_path=$1
    local output_name=$2
    local output_file="$DIAGRAMS_DIR/${output_name}.${DEFAULT_FORMAT}"
    
    echo -e "${YELLOW}üìä Generating diagram from: $manifest_path${NC}"
    
    if [[ -f "$manifest_path" ]]; then
        kube-diagrams -o "$output_file" "$manifest_path"
        if [[ $? -eq 0 ]]; then
            echo -e "${GREEN}‚úÖ Generated: $output_file${NC}"
        else
            echo -e "${RED}‚ùå Failed to generate diagram from: $manifest_path${NC}"
        fi
    elif [[ -d "$manifest_path" ]]; then
        find "$manifest_path" -name "*.yml" -o -name "*.yaml" | while read -r file; do
            kube-diagrams -o "${output_file%.${DEFAULT_FORMAT}}-$(basename "$file" | sed 's/\.[^.]*$//').$DEFAULT_FORMAT" "$file"
        done
    else
        echo -e "${RED}‚ùå Path not found: $manifest_path${NC}"
    fi
}

# Main menu
if [[ $# -eq 0 ]]; then
    echo ""
    echo -e "${BLUE}What would you like to do?${NC}"
    echo "1) Generate cluster overview"
    echo "2) Generate diagrams for specific namespaces"
    echo "3) Generate diagrams for all configured namespaces"
    echo "4) Generate diagram from manifest file/directory"
    echo "5) List available namespaces"
    echo "0) Exit"
    echo ""
    
    read -p "Enter your choice (0-5): " choice
    
    case $choice in
        1)
            generate_cluster_overview
            ;;
        2)
            echo ""
            kubectl get namespaces --no-headers -o custom-columns=":metadata.name"
            echo ""
            read -p "Enter namespace name: " ns
            generate_namespace_diagram "$ns"
            ;;
        3)
{% for ns in kubediagrams_namespaces %}
            generate_namespace_diagram "{{ ns }}"
{% endfor %}
            ;;
        4)
            read -p "Enter path to manifest file or directory: " manifest_path
            read -p "Enter output name (without extension): " output_name
            generate_manifest_diagram "$manifest_path" "$output_name"
            ;;
        5)
            echo -e "${BLUE}Available namespaces:${NC}"
            kubectl get namespaces
            ;;
        0)
            echo "Goodbye!"
            exit 0
            ;;
        *)
            echo -e "${RED}Invalid option!${NC}"
            exit 1
            ;;
    esac
else
    # Handle command line arguments
    case $1 in
        "cluster")
            generate_cluster_overview
            ;;
        "namespace")
            if [[ -z $2 ]]; then
                echo -e "${RED}Usage: $0 namespace <namespace-name>${NC}"
                exit 1
            fi
            generate_namespace_diagram "$2"
            ;;
        "manifest")
            if [[ -z $2 ]] || [[ -z $3 ]]; then
                echo -e "${RED}Usage: $0 manifest <path> <output-name>${NC}"
                exit 1
            fi
            generate_manifest_diagram "$2" "$3"
            ;;
        "all")
{% for ns in kubediagrams_namespaces %}
            generate_namespace_diagram "{{ ns }}"
{% endfor %}
            generate_cluster_overview
            ;;
        *)
            echo -e "${RED}Unknown command: $1${NC}"
            echo "Available commands: cluster, namespace, manifest, all"
            exit 1
            ;;
    esac
fi

echo ""
echo -e "${GREEN}üìÅ Diagrams saved to: $DIAGRAMS_DIR${NC}"
echo -e "${BLUE}üîó View diagrams: ls -la $DIAGRAMS_DIR${NC}"